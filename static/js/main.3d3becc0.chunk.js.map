{"version":3,"sources":["components/Map/Stage.js","components/Map/ZoomContainer.js","components/Map/Equator.js","components/Map/Graticule.js","components/Map/handleTooltip.js","components/Map/Countries.js","components/Map/useInterval.js","components/Map/Map.js","components/App.js","index.js"],"names":["Context","React","createContext","Stage","_ref","className","width","height","children","svgRef","useRef","_useState","useState","_useState2","Object","slicedToArray","svg","setSvg","useEffect","current","react_default","a","createElement","preserveAspectRatio","viewBox","concat","window","screen","ref","Provider","value","useSvg","useContext","ZoomContainer","position","dimensions","isZoomable","svgElement","x","y","k","_useState2$","setTransform","selection","d3","zoom","scaleExtent","translateExtent","on","e","transform","call","ZoomContainer_Context","offset","generateCircle","deg","Array","fill","map","d","i","Equator","props","theme","path","type","properties","name","continent","geometry","coordinates","stroke","equator","equatorColor","strokeWidth","vectorEffect","strokeDasharray","tropicColor","Graticule","Fragment","graticule","outerColor","outerBackgroundColor","outline","innerColor","step","handleMouseOver","tooltipData","style","text","handleMouseOut","handleMouseMove","event","pageX","pageY","Countries","Lines","id","options","countries","highlightedFillColor","background","fillColor","orientation","values","topojson","objects","geometries","forEach","topojsonFeature","geojsonFeature","countryLabel","push","key","class","strokeColor","onMouseOver","onMouseOut","onMouseMove","drawMap","useLayoutEffect","Map","geoJson","projection","reflectY","isUpsideDown","reflectX","fitSize","size","scale","rotate","zoomAndPan","enabled","hasGraticule","hasEquator","presets","geoPolyhedralWaterman","label","App","currentPresetIndex","setCurrentPresetIndex","onChange","parseInt","target","index","objectSpread2","world","coords","lng","lat","labelFillColor","labelStrokeColor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d3becc0.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nconst Context = React.createContext(null);\n\nexport default function Stage({ className, width, height, children }) {\n  const svgRef = useRef(null);\n  const [svg, setSvg] = useState(null);\n  useEffect(() => setSvg(svgRef.current), []);\n  return (\n    <svg\n      preserveAspectRatio=\"xMinYMin meet\"\n      viewBox={`0 0 ${width} ${height}`}\n      height={window.screen.height + \"px\"}\n      className={className}\n      ref={svgRef}\n    >\n      <Context.Provider value={svg}>{children}</Context.Provider>\n    </svg>\n  );\n}\n\nexport function useSvg() {\n  return React.useContext(Context);\n}\n","import * as d3 from \"d3\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSvg } from \"./Stage\";\n\nconst Context = React.createContext(null);\n\nexport default function ZoomContainer({\n  children,\n  position,\n  dimensions,\n  isZoomable\n}) {\n  const svgElement = useSvg();\n  const [{ x, y, k }, setTransform] = useState({\n    x: position.x,\n    y: position.y,\n    k: position.k\n  });\n\n  useEffect(() => {\n    if (!svgElement || !isZoomable) return;\n    const selection = d3.select(svgElement);\n\n    const zoom = d3\n      .zoom()\n      .scaleExtent([1, 10])\n      .translateExtent([\n        [0, 0],\n        [dimensions.width, dimensions.height]\n      ])\n      .on(\"zoom\", function (e) {\n        // console.log(e);\n        setTransform(e.transform);\n      });\n\n    selection.call(zoom);\n    return () => selection.on(\".zoom\", null);\n  }, [svgElement, dimensions, isZoomable]);\n\n  return (\n    <g transform={`translate(${x}, ${y}) scale(${k})`}>\n      <Context.Provider offset={x}>{children}</Context.Provider>\n    </g>\n  );\n}\n","import React from \"react\";\n\nfunction generateCircle(deg) {\n  if (!deg)\n    return [\n      [-180, 0],\n      [-90, 0],\n      [0, 0],\n      [90, 0],\n      [180, 0]\n    ];\n  return new Array(361).fill(1).map((d, i) => {\n    return [-180 + i, deg];\n  });\n}\n\nexport default (props) => {\n  const { theme, path } = props;\n\n  return (\n    <g>\n      <path\n        d={path({\n          type: \"Feature\",\n          properties: { name: \"equator\", type: \"path\", continent: \"world\" },\n          geometry: {\n            type: \"LineString\",\n            coordinates: generateCircle(0)\n          }\n        })}\n        stroke={theme.equator.equatorColor}\n        strokeWidth={1}\n        vectorEffect=\"non-scaling-stroke\"\n        fill=\"none\"\n      />\n      <path\n        d={path({\n          type: \"Feature\",\n          properties: {\n            name: \"capricorntropic\",\n            type: \"path\",\n            continent: \"world\"\n          },\n          geometry: {\n            type: \"LineString\",\n            coordinates: generateCircle(23)\n          }\n        })}\n        strokeDasharray={4}\n        stroke={theme.equator.tropicColor}\n        strokeWidth={1}\n        vectorEffect=\"non-scaling-stroke\"\n        fill=\"none\"\n      />\n      <path\n        d={path({\n          type: \"Feature\",\n          properties: {\n            name: \"cancertropic\",\n            type: \"path\",\n            continent: \"world\"\n          },\n          geometry: {\n            type: \"LineString\",\n            coordinates: generateCircle(-24)\n          }\n        })}\n        strokeDasharray={4}\n        stroke={theme.equator.tropicColor}\n        strokeWidth={1}\n        vectorEffect=\"non-scaling-stroke\"\n        fill=\"none\"\n      />\n    </g>\n  );\n};\n","import React from \"react\";\n\nimport * as d3 from \"d3\";\n\nexport default (props) => {\n  const { theme, path } = props;\n\n  return (\n    <>\n      <path\n        stroke={theme.graticule.outerColor}\n        strokeWidth={\"0.4\"}\n        fill={theme.graticule.outerBackgroundColor}\n        d={path(d3.geoGraticule().outline())}\n      />\n      <path\n        stroke={theme.graticule.innerColor}\n        strokeWidth={\"0.4\"}\n        fill=\"transparent\"\n        d={path(d3.geoGraticule().step([10, 10])())}\n      />\n    </>\n  );\n};\n","import * as d3 from \"d3\";\n\n// show tooltip when hovering over a region\nexport const handleMouseOver = function (tooltipData) {\n  d3.select(\"#tooltip\").style(\"opacity\", 1).text(tooltipData);\n};\n\n// hide tooltip as mouse leaves region\nexport const handleMouseOut = function () {\n  d3.select(\"#tooltip\").style(\"opacity\", 0);\n};\n\n// get mouse location so tooltip tracks cursor\nexport const handleMouseMove = function (event) {\n  d3.select(\"#tooltip\")\n    .style(\"left\", event.pageX + 10 + \"px\")\n    .style(\"top\", event.pageY + 10 + \"px\");\n};\n","import React, { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\nimport * as topojson from \"topojson\";\n\nimport { PatternLines } from \"@vx/pattern\";\n\nimport {\n  handleMouseOver,\n  handleMouseOut,\n  handleMouseMove\n} from \"./handleTooltip\";\n\nexport default function Countries(props) {\n  const drawMap = () => {\n    let countries = [];\n    let featureCollection = Object.values(props.options.topojson.objects)[0]\n      .geometries;\n    featureCollection.forEach((topojsonFeature, i) => {\n      const geojsonFeature = topojson.feature(\n        props.options.topojson,\n        topojsonFeature\n      );\n\n      const fillColor =\n        geojsonFeature.properties.name === props.options.countryLabel\n          ? \"url('#lines')\"\n          : props.options.theme.countries.fillColor;\n\n      countries.push(\n        <path\n          key={i}\n          class=\"country\"\n          d={props.path(geojsonFeature)}\n          fill={fillColor}\n          stroke={props.options.theme.countries.strokeColor}\n          strokeWidth={\"0.4\"}\n          onMouseOver={() => {\n            handleMouseOver(geojsonFeature.properties.name);\n          }}\n          onMouseOut={handleMouseOut}\n          onMouseMove={(event) => {\n            handleMouseMove(event);\n          }}\n        />\n      );\n    });\n    return countries;\n  };\n\n  return (\n    <>\n      <PatternLines\n        id=\"lines\"\n        height={1}\n        width={1}\n        stroke={props.options.theme.countries.highlightedFillColor}\n        strokeWidth={0.3}\n        background={props.options.theme.countries.fillColor}\n        orientation={[\"diagonal\"]}\n      />\n      {drawMap()}\n    </>\n  );\n}\n","import { useEffect, useLayoutEffect, useRef } from \"react\";\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef(callback);\n\n  // Remember the latest callback if it changes.\n  useIsomorphicLayoutEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    // Don't schedule if no delay is specified.\n    // Note: 0 is a valid value for delay.\n    if (!delay && delay !== 0) {\n      return;\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay);\n\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nexport default useInterval;\n","import React, { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\nimport * as topojson from \"topojson\";\n\nimport ZoomContainer from \"./ZoomContainer\";\nimport Equator from \"./Equator\";\nimport Graticule from \"./Graticule\";\nimport Stage from \"./Stage\";\nimport Countries from \"./Countries\";\nimport ProvinceNames from \"./ProvinceNames\";\n\nimport { useSvg } from \"./Stage\";\nimport useInterval from \"./useInterval\";\n\n// const getProjection = (options, geoJson, offset) => {\n//   return (\n//     options\n//       .projection()\n//       .reflectY(options.isUpsideDown)\n//       .reflectX(options.isUpsideDown)\n//       .fitSize([options.size.width, options.size.height - 20], geoJson)\n//       .scale(options.zoom)\n//       // .center([options.coords.lng, options.coords.lat])\n//       .precision(0.1)\n//       .rotate([offset])\n//   );\n// };\n\n// const getPath = (projection) => d3.geoPath().projection(projection);\n\nexport function Map(props) {\n  const [count, setCount] = useState(0);\n  const svgElement = useSvg();\n\n  const geoJson = topojson.feature(\n    props.options.topojson,\n    props.options.topojson.objects.countries\n  );\n\n  const projection = props.options\n    .projection()\n    .reflectY(props.options.isUpsideDown)\n    .reflectX(props.options.isUpsideDown)\n    .fitSize(\n      [props.options.size.width, props.options.size.height - 20],\n      geoJson\n    )\n    .scale(props.options.zoom)\n    // .center([options.coords.lng, options.coords.lat])\n    // .precision(0.1)\n    .rotate([props.options.offset]);\n  const path = d3.geoPath().projection(projection);\n\n  // useEffect(() => {\n  //   projection.rotate([props.offsett]);\n  //   // setProjection(() => getProjection(props.options, geoJson, props.offset));\n  //   // setPath(() => getPath(projection));\n  // }, [props]);\n\n  // const [projection, setProjection] = useState(() =>\n  //   getProjection(props.options, geoJson, props.offset)\n  // );\n\n  // const [path, setPath] = useState(() => getPath(projection));\n\n  // useEffect(() => {\n  //   setProjection(() => getProjection(props.options, geoJson, props.offset));\n  //   setPath(() => getPath(projection));\n  // }, [props]);\n\n  // useEffect(() => {\n  //   setProjection(() => getProjection(props.options, geoJson, props.offset));\n  //   setPath(() => getPath(projection));\n  //   console.log(1);\n\n  //   if (!svgElement) return;\n  //   const selection = d3.select(svgElement);\n  //   console.log(1);\n\n  //   const zoom = d3\n  //     .zoom()\n  //     .scaleExtent([1, 10])\n  //     .translateExtent([\n  //       [0, 0],\n  //       [props.options.size.width, props.options.size.height]\n  //     ])\n  //     .on(\"zoom\", function (e) {\n  //       console.log(1);\n  //       // setTransform(e.transform);\n  //     });\n\n  //   selection.call(zoom);\n  //   return () => selection.on(\".zoom\", null);\n  // }, [props, svgElement]);\n\n  // useInterval(() => {\n  //   setCount(count + 1);\n  //   console.log(1);\n  //   projection.rotate([count]);\n  // }, 1000 / 60);\n\n  //   function handlePanZoom() {\n  //     // Handle pan and zoom events\n\n  //     var scale = zoom.scale();\n  //     var translate = zoom.translate();\n\n  //     // If the scaling changes, ignore translation (otherwise touch zooms are weird).\n  //     var delta = [ translate[0] - translateLast[0], translate[1] - translateLast[1] ];\n  //     if (scale != scaleLast) {\n  //         projection.scale(scale);\n  //     } else {\n  //         var longitude = projection.rotate()[0];\n  //         var tp = projection.translate();\n\n  //         // Use the X translation to rotate, based on the current scale.\n  //         longitude += 360 * (delta[0] / width) * (scaleExtent[0] / scale);\n  //         projection.rotate ([longitude, 0, 0]);\n\n  //         // Use the Y translation to translate projection, clamped by min/max\n  //         updateProjectionBounds();\n\n  //         if (viewMin[1] + delta[1] > 0)\n  //             delta[1] = -viewMin[1];\n  //         else if (viewMax[1] + delta[1] < height)\n  //             delta[1] = height - viewMax[1];\n\n  //         projection.translate ([ tp[0], tp[1] + delta[1] ]);\n  //     }\n\n  //     // Store the last transform values. NOTE: Resetting zoom.translate() and zoom.scale()\n  //     // would seem equivalent, but it doesn't seem to work reliably.\n  //     scaleLast = scale;\n  //     translateLast = translate;\n\n  //     render();\n  // }\n\n  return (\n    <>\n      <div id=\"tooltip\"></div>\n      <Stage\n        width={props.options.size.width}\n        height={props.options.size.height}\n      >\n        <ZoomContainer\n          position={props.options.zoomAndPan.position}\n          isZoomable={props.options.zoomAndPan.enabled}\n          dimensions={props.options.size}\n        >\n          {props.options.hasGraticule ? (\n            <Graticule path={path} theme={props.options.theme} />\n          ) : null}\n          <Countries path={path} options={props.options} />\n          {props.options.hasEquator ? (\n            <Equator path={path} theme={props.options.theme} />\n          ) : null}\n          {/* <ProvinceNames geojson={geoJson} path={path} /> */}\n        </ZoomContainer>\n      </Stage>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport world from \"../data/world-without-antarctica.json\";\nimport { Map } from \"./Map/Map\";\n\nimport { geoPolyhedralWaterman } from \"d3-geo-projection\";\n\n/*\n Use case 1 : \n Montrer aux eleves comment les eleves d'autres pays\n voient le monde.\n*/\n\n/*\n\n Use case 2 : \n Mettre en avant la deformation de la projection mercator;\n\n Solution TrueSizeOf\n Barre de recherche pour highlight le contour d'un pays;\n Permettre de déplacer ce pays sur la terre pour voir comment\n la projection se comporte\n\n*/\n\n/*\n\n Use case 3 : \n Mettre en avant les differents types de projection\n\n Solution\n Generer une carte avec des parametres projection / pos / rot aleatoires\n et sans bordures de pays : essayer de retrouver la france \n\n*/\n\nconst projections = [\n  d3.geoMercator,\n  d3.geoAzimuthalEqualArea,\n  d3.geoAzimuthalEquidistant,\n  d3.geoGnomonic,\n  d3.geoOrthographic,\n  d3.geoStereographic,\n  d3.geoEqualEarth,\n  d3.geoConicConformal,\n  d3.geoConicEqualArea,\n  d3.geoConicEquidistant,\n  d3.geoEquirectangular,\n  d3.geoTransverseMercator,\n  d3.geoNaturalEarth1,\n  geoPolyhedralWaterman\n];\n\nconst presets = [\n  {\n    label: \"Français\",\n    countryLabel: \"France\",\n    isUpsideDown: false,\n    projection: d3.geoMercator, // geoMercator\n    offset: 0\n  },\n  {\n    label: \"Chinois\",\n    countryLabel: \"China\",\n    isUpsideDown: false,\n    projection: d3.geoEqualEarth,\n    offset: 210,\n    zoom: 92\n  },\n  {\n    label: \"Australiens\",\n    countryLabel: \"Australia\",\n    isUpsideDown: true,\n    projection: d3.geoMercator,\n    offset: 210\n  },\n  {\n    label: \"Americains\",\n    countryLabel: \"United States\",\n    isUpsideDown: false,\n    projection: d3.geoMercator,\n    offset: 80\n  }\n];\n\nexport function App() {\n  const [currentPresetIndex, setCurrentPresetIndex] = useState(0);\n\n  return (\n    <>\n      <div className=\"top-bar\">\n        <h3 className=\"top-bar__title\">Comment les</h3>\n        <select\n          className=\"top-bar__select\"\n          onChange={(e) => {\n            setCurrentPresetIndex(parseInt(e.target.value, 10));\n          }}\n          value={currentPresetIndex}\n        >\n          {presets.map((projection, index) => {\n            return (\n              <option key={index} value={index}>\n                {projection.label}\n              </option>\n            );\n          })}\n        </select>\n        <h3 className=\"top-bar__title\">voient-ils le monde ?</h3>\n      </div>\n      <Map\n        options={{\n          size: {\n            width: 500,\n            height: 350\n          },\n          topojson: world,\n          isUpsideDown: false,\n          projection: d3.geoMercator,\n          offset: 0,\n          coords: {\n            lng: 0,\n            lat: 0\n          },\n          zoom: 80,\n          hasGraticule: true,\n          hasEquator: true,\n          zoomAndPan: {\n            enabled: false,\n            position: { x: 0, y: 0, k: 1 }\n          },\n          theme: {\n            graticule: {\n              innerColor: \"#e5e5e5\",\n              outerColor: \"#a5a5a5\",\n              outerBackgroundColor: \"#def4f4\"\n            },\n            equator: {\n              equatorColor: \"red\",\n              tropicColor: \"#a5a5a5\"\n            },\n            countries: {\n              fillColor: \"#f4e0b3\",\n              highlightedFillColor: \"#351F04\",\n              strokeColor: \"#9B7649\",\n              labelFillColor: \"black\",\n              labelStrokeColor: \"white\"\n            }\n          },\n          ...presets[currentPresetIndex]\n        }}\n      />\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\n\nimport { App } from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n"],"sourceRoot":""}